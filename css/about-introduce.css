---
title:"このサイトについて"
date:"2018-12-13"
category:"about"
---
このサイトは元々アプリのためのヘルプページや宣伝に使っていたのですが、今ではプログラミングのモチベーション、および「未来の自分」のために忘備録などを残すことにしています。

以前まで「はてなブログ有料版」を使っていたのですが、「GitHub Pages」に引っ越すことにしました。
今更ながらかもしれませんが、無料でできるgithub.ioがカッコ良いなと思ったのです。
「GitHub Pages」は動的なCGIなどは使えませんが、Staticなコンテンツなら無料で置くことができます。

さて、このサイトのHTMLファイルの書き出しは、全て自前のプログラムで組んでいます。
Hugoなどの静的サイトジェネレーターは使っておりません。

HTMLファイルの出力は、Mac上でPHPとシェルスクリプトを動かして行なっています。
とは言っても、PHPで生成したHTMLを、リダイレクトでファイルに書き込んでいるだけなのです。
動的コンテンツを作ることに比べて、たいして変わらないことに気づきました。
```
ob_start();
include "./template/index.php";
$resultHtml = ob_get_contents();
ob_end_clean();

$writePath = "./contents/index.html";

file_put_contents($writePath, $resultHtml);
```

VScodeとVimをエディターとして、フルスクラッチで約1週間くらいの工程でベースの出来上がりです。

MarkDownの変換も以前はPandocを使っていましたが、それもやめました。
自分だけのなんちゃってMarkDownを採用しています。
そもそもMarkDownをHTMLに変換するのは、正規表現で簡単にできることに気づきました。
そして、自作プログラムならば独自の記述を付け足すことができるので、通常のMarkDownより使い勝手を良くすることができます。チューニングってやつですね。
例えば
`image300:画像パス`
のように書くことで、widthを300pxに指定するようにしました。
```
if (preg_match('/^image([0-9]+):/', $line, $matches) == true) {
        $width = $matches[1];
        $line = str_replace(array("\r", "\n", "image" . $width . ":"), '', $line);
        return '<img src="' . $line . "\" width=\"" . $width . "\" />\n";
}
```


さらに、MarkDownファイルを更新したら、つまり記事を作成したり修正したりしたら、自動でHTML変換をして欲しいと思いました。
そこで、ファイルのmodify timestampを監視して処理を実行するBashスクリプトを次のように組んでみました。
```
function checkTimeStamp () {
  local nowTime=`date +%s`
  lastTime=0
  lastFile=''

  for file in ${srcDir}*.md; do
    modifyTime=`stat -f "%m" $file`

    if [ $(($modifyTime)) -gt $(($lastTime)) ]; then
        lastTime=$modifyTime
        lastFile=$file
    fi
  done
  echo $lastTime

}

lastTime=0

while :
  do
      resultTime=$(checkTimeStamp)
      if [ $resultTime -gt $lastTime ]; then
        lastTime=$resultTime
        echo "Do convert..."
        doConverter
        echo "Did converted !"
      fi
  
  sleep 5
done
```

自前ジェネレーターにはシンプルな機能しかありませんが、軽量でミニマムな仕様になったので快適です。
外部のライブラリーを使わずに自前のプログラミング処理をすることで、精神衛生上にもよくなりました。
また、CSS、レシポンシブルデザインなどの勉強にもなりました。
何より自分でプログラミングして作ることは、楽しいものです。