---
title:"Pythonのトレンド動向とクラスの書き方"
date:"2018-12-18"
category:"blog"
---
## はじめに
AIや機械学習、ディープラーニングなどのブームでPythonが人気上昇していることは知っていました。ここ数年で、本屋でもずらりとPythonの書籍が増えよく目に入っていました。しかし、自分には必要ないかなと思っていて遠ざけていましたが、遊びがてらPythonに触れてみたところ、書きやすく読みやすいことがわかり好感をもちました。他人が書いたプログラムを読むときも、インデントというルールが理解を助けてくれるようで、読みやすく感じます。そして文字列の扱いがとても便利にできているので、何も科学技術計算のためだけに使うというような言語でもなさそうです。その場しのぎでPHPを使ってきましたが、この機会にPythonに乗り換えても良さそうです。
ここでは、Pythonの導入としてクラスの書き方を調べることにしました。

## 各言語のトレンド動向
ところでPythonも含め、主要なプログラミング言語がどのような動向にあるのか「Google Trends」で調べてみました。
https://trends.google.co.jp/trends/?geo=JP

グラフはすべての国を対象に、過去5年間、インターネット通信事業のカテゴリーに絞って表示したものです。

まずPythonですが、予想通りの人気上昇中といったところでしょうか。
image:/images/trend-python.jpg

同じスクリプト言語のPHPやRubyは下降気味です。
image:/images/trend-php.jpg
image:/images/trend-ruby.jpg

JavaScriptは上昇しているのかなと思いましたが、平坦な結果です。これは常に安定した人気があるということなのかもしれません。
image:/images/trend-javascript.jpg

またフロントエンドのJavaScriptライブラリのReactが爆発的に人気を増やしている様子です。
image:/images/trend-react.jpg

Android開発でも使うJavaですがどんどん人気を下げています。
image:/images/trend-java.jpg

その代わりKotlinが上昇中です。
image:/images/trend-kotlin.jpg

iOS開発で使うObjective-Cですが、だんだん人気がなくなっているようです。
image:/images/trend-objectivec.jpg

その代わりSwiftに置き換わっています。
image:/images/trend-swift.jpg



## 最新版Pythonを使えるようにする
さて、Google先生に聞いてpyenvで最新版のpython3.xをMacにインストールしました。ですが、以前にbrewインストールしたpython2.xを参照してしまい、最新版のpythonが使えない状態でした。色々とためした結果、次のようにして解決することができました。

zシェルを使っているのに、bashの設定に環境変数を書き込んでいたのが原因だったようです。
ホームディレクトリに移動して`.zshrc`を編集してあげます。
```
cd ~
vi .zshrc
```

次のような記述を最下部に付け足すことで上手く動きました。
```
export PYENV_ROOT="$HOME/.pyenv"
eval "$(pyenv init -)"
alias py='python'
```
毎回`python hoge.py`と入力するのは面倒なので`py hoge.py`で実行できるようにエイリアスを指定しています。

保存したら、zシェルの設定をリロードします。`source .zshrc`
`py -V`と叩いて`Python 3.7.1`と出力されました。これで無事、最新版のPythonが使えるようになりました。
ちなみに、`printenv`コマンドを実行すると、設定されている全ての環境変数が確認できます。


## クラスの使い方
オブジェクティブなプログラミングができるように、入門としてクラスを作ることにしました。
```
import glob
import os

class RecursiveFile():
    lineN = 0 #static変数
    def __init__(self, startDir, extension): #コンストラクタ
        self.extension = extension
        self.paths = glob.glob(startDir+"/**/*."+extension, recursive=True)

    def trace(self, callback): #第一引数にselfを指定する必要がある
        for path in self.paths:
            RecursiveFile.lineN += 1
            callback(RecursiveFile.lineN, path) #クロージャー関数をinvokeしている
    
    def __del__(self): #デストラクタ
        print("destroy")




def tester():
    #このようにクロージャーにすることで、RecursiveFileクラスを気軽に使いまわすことができる
    def callback(num, path): #クロージャー用関数
        print("{0}: {1}".format(num, path))

    abspath = os.path.dirname(os.path.abspath(__file__))
    recursive = RecursiveFile(abspath, "txt")
    recursive.trace(callback) #クロージャー

if __name__ == "__main__":
    tester()
```
ディレクトリを再帰的に探索して、指定の拡張子ファイルを全て取得するだけの単純な処理ですが、プログラミング中にはクラス定義、コンストラクタ、デストラクタ、メソッド、スタティック変数、クロージャーを含んでいます。ここら辺が使えるようになると管理、メンテナンスがグンと楽になりそうです。

それでは、詳しくプログラミングをみていきます。
```
class RecursiveFile():
    lineN = 0
    def __init__(self, startDir, extension):
        self.extension = extension
        self.paths = glob.glob(startDir+"/**/*."+extension, recursive=True)
```
まず`class RecursiveFile():`でクラスを宣言しています。
次にインデントして処理を書いていきます。
`lineN`はstaticな変数になります。型宣言などの必要がなくこのように書けば良いみたいです。
`__init__`はコンストラクタメソッドになります。メソッドの第一引数には`self`を指定しなければならないようです。`self`の後に続いて引数書いていけば、クラスのインスタントを作るときに、`RecursiveFile(abspath, "txt")`のように引数を渡して初期化することができます。
そして、`glob.glob(startDir+"/**/*."+extension, recursive=True)`の部分が、ディレクトリを再帰的に探索して、指定の拡張子ファイルを全て取得する処理になります。`glob.glob`はPython3.5以降で使えるようです。特定のフォルダ以降も再帰的に処理したい場合は`recursive`を`True`に設定し、`/**/`のように書きます。
`glob.glob("./**/*.txt", recursive=True)`のようにたったの一行で、再帰的にファイルが取得できてしまうなら、今回のようにクラス化する必要はなかったかもしれません。それでもここでは「クラスの使い方の勉強」と思って、このまま進めていきましょう。

RecursiveFileクラスの続きの処理をみていきます。
```
    def trace(self, callback):
        for path in self.paths:
            RecursiveFile.lineN += 1
            callback(RecursiveFile.lineN, path)
    
    def __del__(self):
        print("destroy")

```
traceメソッドは独自に実装したメソッドになります。第二引数のcallbackには関数オブジェクトが渡される設計です。
実際に次のような関数を渡してあげることで、コールバックで処理を書くことができます。
```
    def callback(num, path):
        print("{0}: {1}".format(num, path))
```

クラスの最初の方で宣言したstaticなlineN変数は、`RecursiveFile.lineN`のように書くことでアクセスできます。
`__del__(self)`というのはデストラクタです。循環参照して解放されない場合などのデバッグに使えそうです。
以上で、基本的なクラス使い方がわかりました。

それでは、このクラスを実際に使ってみます。
```
def tester():
    def callback(num, path):
        print("{0}: {1}".format(num, path))

    abspath = os.path.dirname(os.path.abspath(__file__))
    recursive = RecursiveFile(abspath, "txt")
    recursive.trace(callback)

if __name__ == "__main__":
    tester()
```
`tester()`メソッドを作って`if __name__ == "__main__":`以降で実行しています。
このファイルを直接実行した場合にのみ、`if __name__ == "__main__":`以降がスルーします。つまり外部ファイルからimportされた場合には実行されないので、開発でのテスト処理を書くことができます。
実行結果はこのようになりました。
```
1: /somewhere/hoge.txt
2: /somewhere/dir/fuga.txt
3: /somewhere/dir/subDir/fuga2.txt
```

以上でPython入門ができました。もしかしたら間違いや、もっと良い書き方があるかもしれませんので、各自でPythonを勉強してみてくださいね。

<a target="_blank"  href="https://www.amazon.co.jp/gp/product/4774196436/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774196436&linkCode=as2&tag=101010fun-22&linkId=cac21a621d087c2ba54b230cca57db1d"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4774196436&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=101010fun-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=101010fun-22&l=am2&o=9&a=4774196436" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><a target="_blank"  href="https://www.amazon.co.jp/gp/product/4797396814/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797396814&linkCode=as2&tag=101010fun-22&linkId=70d1fff022835386a88986a32c7852ea"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4797396814&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=101010fun-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=101010fun-22&l=am2&o=9&a=4797396814" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><a target="_blank"  href="https://www.amazon.co.jp/gp/product/4839960240/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4839960240&linkCode=as2&tag=101010fun-22&linkId=a9431092a8ccee3fb7638f1a1943f503"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4839960240&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=101010fun-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=101010fun-22&l=am2&o=9&a=4839960240" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />