---
title:"MeCabで形態素解析"
date:"2018-12-14"
category:"blog"
---
## MacにMeCabをセットアップ
形態素解析のMeCabを使ってみることにしました。
http://taku910.github.io/mecab/

自分の環境がMacですので、MeCab本体をbrewからインストールしてみます。
`brew install mecab`

このままでは`param.cpp(69) [ifs] no such file or directory: /usr/local/lib/mecab/dic/ipadic/dicrc`とエラーが出てしまいました。辞書が無いと使えないようです。下記のコマンドで辞書をインストールしてみます。
`brew install mecab-ipadic`


## 使い方
セットアップが完了したところで、Macのターミナル上で`mecab`と入力してreturnを押します。
そして解析したい文章を入力します。例えば「下記のコマンドで辞書をインストールしてみます。」と入力してみました。
すると、このような形で文章が品詞分けされました。

|テキスト|品詞|
|----|-----|
|下記	|名詞,一般,*,*,*,*,下記,カキ,カキ|
|の	|助詞,連体化,*,*,*,*,の,ノ,ノ|
|コマンド	|名詞,一般,*,*,*,*,コマンド,コマンド,コマンド|
|で	|助詞,格助詞,一般,*,*,*,で,デ,デ|
|辞書	|名詞,一般,*,*,*,*,辞書,ジショ,ジショ|
|を	|助詞,格助詞,一般,*,*,*,を,ヲ,ヲ|
|インストール	|名詞,一般,*,*,*,*,インストール,インストール,インストール|
|し	|動詞,自立,*,*,サ変・スル,連用形,する,シ,シ|
|て	|助詞,接続助詞,*,*,*,*,て,テ,テ|
|み	|動詞,非自立,*,*,一段,連用形,みる,ミ,ミ|
|ます	|助動詞,*,*,*,特殊・マス,基本形,ます,マス,マス|
|。	|記号,句点,*,*,*,*,。,。,。|



## シェルスクリプトで使いやすくしてみる
mecabを実用的に使えるようにするにはシェルスクリプトを組む必要があります。
まずは単純にファイルを解析して、行ごとに処理できるようにしてみます。
```
#!/bin/bash

file="post/about-introduce.md"
mecab $file | while read line
do
    echo $line     
done
```

つぎに、上記の$line変数をタグ区切りで分けてみます。
awkコマンドは-Fオプションで区切り文字を指定しない限り、タブまたは半角スペースで区切ってくれます。そしてMeCabの出力はタグ区切りとなっています。ですから、次のように書くことができます。
```
do
    text=`echo $line | awk '{print $1}'`
    hinshi=`echo $line | awk '{print $2}'`
done
```
これでテキスト部分と品詞に別れました。

それでは品詞の中から「名詞,一般」という文字が含まれている行だけを抽出してみましょう。
```
do
    text=`echo $line | awk '{print $1}'`
    hinshi=`echo $line | awk '{print $2}'`
    meishi=`echo $hinshi | grep 名詞,一般`
    if [ "$meishi" = "" ]; then
        continue
    fi

    echo $text

done
```
プログラミング中に` [: =: unary operator expected`このようなエラーが吐き出されてしまいました。
`if [ "$meishi" = "" ]; then`のように変数をダブルクオーテーションで囲ってあげることで回避できました。


さて、これで無事「名詞,一般」のみの行をフィルタリングすることができました。
```
サイト
about
サイト
アプリ
ヘルプ
ページ
モチベーション
忘備
ブログ
有料
Pages
無料
github
io
カッコ
サイト
書き出し
自前
サイトジェネレーター
シェル
スクリプト
PHP
HTML
リダイレクト
ファイル
```

PHPのexecから使えるように、もう少し改良したのがこちらです。
mecabDeKaiseki.sh
```
#!/bin/bash

CMDNAME=`basename $0`
if [ $# -ne 2 ]; then
    echo "Usage: $CMDNAME filepath hinshi" 1>&2
    exit 1
fi

file=$1
filter=$2

mecab $file | while read line
do
    text=`echo $line | awk '{print $1}'`
    hinshi=`echo $line | awk '{print $2}'`
    meishi=`echo $hinshi | grep "$filter"`
    if [ -n "$meishi" ]; then
        echo $text
    fi
done
```
ターミナルで使う場合は第一引数にファイルパスを、第二引数にフィルタリングしたい品詞の文字列を渡してあげます。
`./mecabDeKaiseki.sh post/about-introduce.md "名詞,一般"`

簡易的な実装ではありますが、これでMeCabを気軽に利用できるようになりました。

<a target="_blank"  href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797377623&linkCode=as2&tag=101010fun-22&linkId=b73336026353f211400d68f588761dbb"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4797377623&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=101010fun-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=101010fun-22&l=am2&o=9&a=4797377623" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />